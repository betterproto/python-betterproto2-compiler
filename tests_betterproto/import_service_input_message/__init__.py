# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: import_service_input_message.proto, request_message.proto
# plugin: python-betterproto2
# This file has been @generated

__all__ = (
    "Nested",
    "NestedRequestMessage",
    "RequestMessage",
    "RequestResponse",
    "TestBase",
    "TestStub",
    "TestSyncStub",
)

from dataclasses import dataclass
from typing import TYPE_CHECKING

import betterproto2
import grpc
import grpclib
from betterproto2.grpc.grpclib_server import ServiceBase

from ..message_pool import default_message_pool

if TYPE_CHECKING:
    import grpclib.server
    from betterproto2.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline

betterproto2.check_compiler_version("0.5.1")


@dataclass(eq=False, repr=False)
class Nested(betterproto2.Message):
    pass


default_message_pool.register_message("import_service_input_message", "Nested", Nested)


@dataclass(eq=False, repr=False)
class NestedRequestMessage(betterproto2.Message):
    nested_argument: "int" = betterproto2.field(1, betterproto2.TYPE_INT32)


default_message_pool.register_message("import_service_input_message", "Nested.RequestMessage", NestedRequestMessage)


@dataclass(eq=False, repr=False)
class RequestMessage(betterproto2.Message):
    argument: "int" = betterproto2.field(1, betterproto2.TYPE_INT32)


default_message_pool.register_message("import_service_input_message", "RequestMessage", RequestMessage)


@dataclass(eq=False, repr=False)
class RequestResponse(betterproto2.Message):
    value: "int" = betterproto2.field(1, betterproto2.TYPE_INT32)


default_message_pool.register_message("import_service_input_message", "RequestResponse", RequestResponse)


class TestSyncStub:
    """
    Tests generated service correctly imports the RequestMessage
    """

    def __init__(self, channel: grpc.Channel):
        self._channel = channel

    def do_thing(self, message: "RequestMessage") -> "RequestResponse":
        return self._channel.unary_unary(
            "/import_service_input_message.Test/DoThing",
            RequestMessage.SerializeToString,
            RequestResponse.FromString,
        )(message)

    def do_thing_2(self, message: "child.ChildRequestMessage") -> "RequestResponse":
        return self._channel.unary_unary(
            "/import_service_input_message.Test/DoThing2",
            child.ChildRequestMessage.SerializeToString,
            RequestResponse.FromString,
        )(message)

    def do_thing_3(self, message: "NestedRequestMessage") -> "RequestResponse":
        return self._channel.unary_unary(
            "/import_service_input_message.Test/DoThing3",
            NestedRequestMessage.SerializeToString,
            RequestResponse.FromString,
        )(message)


class TestStub(betterproto2.ServiceStub):
    """
    Tests generated service correctly imports the RequestMessage
    """

    async def do_thing(
        self,
        message: "RequestMessage",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "RequestResponse":
        return await self._unary_unary(
            "/import_service_input_message.Test/DoThing",
            message,
            RequestResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def do_thing_2(
        self,
        message: "child.ChildRequestMessage",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "RequestResponse":
        return await self._unary_unary(
            "/import_service_input_message.Test/DoThing2",
            message,
            RequestResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def do_thing_3(
        self,
        message: "NestedRequestMessage",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "RequestResponse":
        return await self._unary_unary(
            "/import_service_input_message.Test/DoThing3",
            message,
            RequestResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


from . import child


class TestBase(ServiceBase):
    """
    Tests generated service correctly imports the RequestMessage
    """

    async def do_thing(self, message: "RequestMessage") -> "RequestResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def do_thing_2(self, message: "child.ChildRequestMessage") -> "RequestResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def do_thing_3(self, message: "NestedRequestMessage") -> "RequestResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_do_thing(self, stream: "grpclib.server.Stream[RequestMessage, RequestResponse]") -> None:
        request = await stream.recv_message()
        response = await self.do_thing(request)
        await stream.send_message(response)

    async def __rpc_do_thing_2(
        self, stream: "grpclib.server.Stream[child.ChildRequestMessage, RequestResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.do_thing_2(request)
        await stream.send_message(response)

    async def __rpc_do_thing_3(self, stream: "grpclib.server.Stream[NestedRequestMessage, RequestResponse]") -> None:
        request = await stream.recv_message()
        response = await self.do_thing_3(request)
        await stream.send_message(response)

    def __mapping__(self) -> "dict[str, grpclib.const.Handler]":
        return {
            "/import_service_input_message.Test/DoThing": grpclib.const.Handler(
                self.__rpc_do_thing,
                grpclib.const.Cardinality.UNARY_UNARY,
                RequestMessage,
                RequestResponse,
            ),
            "/import_service_input_message.Test/DoThing2": grpclib.const.Handler(
                self.__rpc_do_thing_2,
                grpclib.const.Cardinality.UNARY_UNARY,
                child.ChildRequestMessage,
                RequestResponse,
            ),
            "/import_service_input_message.Test/DoThing3": grpclib.const.Handler(
                self.__rpc_do_thing_3,
                grpclib.const.Cardinality.UNARY_UNARY,
                NestedRequestMessage,
                RequestResponse,
            ),
        }
