# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: nested.proto
# plugin: python-betterproto2
# This file has been @generated

__all__ = ("Sibling", "Test", "TestMsg", "TestNested")

from dataclasses import dataclass

import betterproto2

from ..message_pool import default_message_pool

betterproto2.check_compiler_version("0.5.1")


class TestMsg(betterproto2.Enum):
    """
    This is the nested enum.
    """

    NONE = 0

    THIS = 1


@dataclass(eq=False, repr=False)
class Sibling(betterproto2.Message):
    foo: "int" = betterproto2.field(1, betterproto2.TYPE_INT32)


default_message_pool.register_message("nested", "Sibling", Sibling)


@dataclass(eq=False, repr=False)
class Test(betterproto2.Message):
    """
    A test message with a nested message inside of it.
    """

    nested: "TestNested | None" = betterproto2.field(1, betterproto2.TYPE_MESSAGE, optional=True)

    sibling: "Sibling | None" = betterproto2.field(2, betterproto2.TYPE_MESSAGE, optional=True)

    sibling2: "Sibling | None" = betterproto2.field(3, betterproto2.TYPE_MESSAGE, optional=True)

    msg: "TestMsg" = betterproto2.field(4, betterproto2.TYPE_ENUM, default_factory=lambda: TestMsg(0))


default_message_pool.register_message("nested", "Test", Test)


@dataclass(eq=False, repr=False)
class TestNested(betterproto2.Message):
    """
    This is the nested type.
    """

    count: "int" = betterproto2.field(1, betterproto2.TYPE_INT32)
    """
    Stores a simple counter.
    """


default_message_pool.register_message("nested", "Test.Nested", TestNested)
