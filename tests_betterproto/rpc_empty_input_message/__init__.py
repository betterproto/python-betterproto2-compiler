# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: rpc_empty_input_message.proto
# plugin: python-betterproto2
# This file has been @generated

__all__ = ("Response", "ServiceBase", "ServiceStub", "ServiceSyncStub", "Test")

from dataclasses import dataclass
from typing import TYPE_CHECKING

import betterproto2
import grpc
import grpclib
from betterproto2.grpc.grpclib_server import ServiceBase

from ..message_pool import default_message_pool

if TYPE_CHECKING:
    import grpclib.server
    from betterproto2.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline

betterproto2.check_compiler_version("0.5.1")


@dataclass(eq=False, repr=False)
class Response(betterproto2.Message):
    v: "int" = betterproto2.field(1, betterproto2.TYPE_INT32)


default_message_pool.register_message("rpc_empty_input_message", "Response", Response)


@dataclass(eq=False, repr=False)
class Test(betterproto2.Message):
    pass


default_message_pool.register_message("rpc_empty_input_message", "Test", Test)


class ServiceSyncStub:
    def __init__(self, channel: grpc.Channel):
        self._channel = channel

    def read(self, message: "Test | None" = None) -> "Response":
        if message is None:
            message = Test()

        return self._channel.unary_unary(
            "/rpc_empty_input_message.Service/read",
            Test.SerializeToString,
            Response.FromString,
        )(message)


class ServiceStub(betterproto2.ServiceStub):
    async def read(
        self,
        message: "Test | None" = None,
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "Response":
        if message is None:
            message = Test()

        return await self._unary_unary(
            "/rpc_empty_input_message.Service/read",
            message,
            Response,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class ServiceBase(ServiceBase):
    async def read(self, message: "Test") -> "Response":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_read(self, stream: "grpclib.server.Stream[Test, Response]") -> None:
        request = await stream.recv_message()
        response = await self.read(request)
        await stream.send_message(response)

    def __mapping__(self) -> "dict[str, grpclib.const.Handler]":
        return {
            "/rpc_empty_input_message.Service/read": grpclib.const.Handler(
                self.__rpc_read,
                grpclib.const.Cardinality.UNARY_UNARY,
                Test,
                Response,
            ),
        }
