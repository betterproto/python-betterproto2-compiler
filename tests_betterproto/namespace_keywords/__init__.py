# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: namespace_keywords.proto
# plugin: python-betterproto2
# This file has been @generated

__all__ = ("Test",)

from dataclasses import dataclass

import betterproto2

from ..message_pool import default_message_pool

betterproto2.check_compiler_version("0.5.1")


@dataclass(eq=False, repr=False)
class Test(betterproto2.Message):
    """
    Tests that messages may contain fields that are Python keywords

    Generated with Python 3.7.6
    print('\\n'.join(f'string {k} = {i+1};' for i,k in enumerate(keyword.kwlist)))
    """

    false: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    none: "str" = betterproto2.field(2, betterproto2.TYPE_STRING)

    true: "str" = betterproto2.field(3, betterproto2.TYPE_STRING)

    and_: "str" = betterproto2.field(4, betterproto2.TYPE_STRING)

    as_: "str" = betterproto2.field(5, betterproto2.TYPE_STRING)

    assert_: "str" = betterproto2.field(6, betterproto2.TYPE_STRING)

    async_: "str" = betterproto2.field(7, betterproto2.TYPE_STRING)

    await_: "str" = betterproto2.field(8, betterproto2.TYPE_STRING)

    break_: "str" = betterproto2.field(9, betterproto2.TYPE_STRING)

    class_: "str" = betterproto2.field(10, betterproto2.TYPE_STRING)

    continue_: "str" = betterproto2.field(11, betterproto2.TYPE_STRING)

    def_: "str" = betterproto2.field(12, betterproto2.TYPE_STRING)

    del_: "str" = betterproto2.field(13, betterproto2.TYPE_STRING)

    elif_: "str" = betterproto2.field(14, betterproto2.TYPE_STRING)

    else_: "str" = betterproto2.field(15, betterproto2.TYPE_STRING)

    except_: "str" = betterproto2.field(16, betterproto2.TYPE_STRING)

    finally_: "str" = betterproto2.field(17, betterproto2.TYPE_STRING)

    for_: "str" = betterproto2.field(18, betterproto2.TYPE_STRING)

    from_: "str" = betterproto2.field(19, betterproto2.TYPE_STRING)

    global_: "str" = betterproto2.field(20, betterproto2.TYPE_STRING)

    if_: "str" = betterproto2.field(21, betterproto2.TYPE_STRING)

    import_: "str" = betterproto2.field(22, betterproto2.TYPE_STRING)

    in_: "str" = betterproto2.field(23, betterproto2.TYPE_STRING)

    is_: "str" = betterproto2.field(24, betterproto2.TYPE_STRING)

    lambda_: "str" = betterproto2.field(25, betterproto2.TYPE_STRING)

    nonlocal_: "str" = betterproto2.field(26, betterproto2.TYPE_STRING)

    not_: "str" = betterproto2.field(27, betterproto2.TYPE_STRING)

    or_: "str" = betterproto2.field(28, betterproto2.TYPE_STRING)

    pass_: "str" = betterproto2.field(29, betterproto2.TYPE_STRING)

    raise_: "str" = betterproto2.field(30, betterproto2.TYPE_STRING)

    return_: "str" = betterproto2.field(31, betterproto2.TYPE_STRING)

    try_: "str" = betterproto2.field(32, betterproto2.TYPE_STRING)

    while_: "str" = betterproto2.field(33, betterproto2.TYPE_STRING)

    with_: "str" = betterproto2.field(34, betterproto2.TYPE_STRING)

    yield_: "str" = betterproto2.field(35, betterproto2.TYPE_STRING)


default_message_pool.register_message("namespace_keywords", "Test", Test)
