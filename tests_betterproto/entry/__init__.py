# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: entry.proto
# plugin: python-betterproto2
# This file has been @generated

__all__ = (
    "ExportEntry",
    "Test",
)

from dataclasses import dataclass

import betterproto2

from ..message_pool import default_message_pool

betterproto2.check_compiler_version("0.5.1")


@dataclass(eq=False, repr=False)
class ExportEntry(betterproto2.Message):
    name: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)


default_message_pool.register_message("entry", "ExportEntry", ExportEntry)


@dataclass(eq=False, repr=False)
class Test(betterproto2.Message):
    """
    This is a minimal example of a repeated message field that caused issues when
    checking whether a message is a map.

    During the check wheter a field is a "map", the string "entry" is added to
    the field name, checked against the type name and then further checks are
    made against the nested type of a parent message. In this edge-case, the
    first check would pass even though it shouldn't and that would cause an
    error because the parent type does not have a "nested_type" attribute.
    """

    export: "list[ExportEntry]" = betterproto2.field(1, betterproto2.TYPE_MESSAGE, repeated=True)


default_message_pool.register_message("entry", "Test", Test)
