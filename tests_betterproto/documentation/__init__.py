# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: documentation.proto
# plugin: python-betterproto2
# This file has been @generated

__all__ = ("ComplexDocumentation", "Enum", "ServiceBase", "ServiceStub", "ServiceSyncStub", "Test")

from dataclasses import dataclass
from typing import TYPE_CHECKING

import betterproto2
import grpc
import grpclib
from betterproto2.grpc.grpclib_server import ServiceBase

from ..message_pool import default_message_pool

if TYPE_CHECKING:
    import grpclib.server
    from betterproto2.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline

betterproto2.check_compiler_version("0.5.1")


class Enum(betterproto2.Enum):
    """
    Documentation of enum 1
    other line 1

    Documentation of enum 2
    other line 2

    Documentation of enum 3
    """

    Enum_Variant = 0
    """
    Documentation of variant 1
    other line 1

    Documentation of variant 2
    other line 2

    Documentation of variant 3
    """


@dataclass(eq=False, repr=False)
class ComplexDocumentation(betterproto2.Message):
    """
    A comment with backslashes \\ and triple quotes \"\"\"
    Simple quotes are not escaped "
    """

    pass


default_message_pool.register_message("documentation", "ComplexDocumentation", ComplexDocumentation)


@dataclass(eq=False, repr=False)
class Test(betterproto2.Message):
    """
    Documentation of message 1
    other line 1

    Documentation of message 2
    other line 2

    Documentation of message 3

    Oneofs:
        - oneof_example: Documentation of oneof 1
            other line 1

            Documentation of oneof 2
            other line 2

            Documentation of oneof 3
    """

    x: "int" = betterproto2.field(1, betterproto2.TYPE_UINT32)
    """
    Documentation of field 1
    other line 1

    Documentation of field 2
    other line 2

    Documentation of field 3
    """

    a: "int | None" = betterproto2.field(2, betterproto2.TYPE_INT32, optional=True, group="oneof_example")
    """
    Documentation of oneof field 1
    other line 1

    Documentation of oneof field 2
    other line 2

    Documentation of oneof field 3
    """


default_message_pool.register_message("documentation", "Test", Test)


class ServiceSyncStub:
    """
    Documentation of service 1
    other line 1

    Documentation of service 2
    other line 2

    Documentation of service 3
    """

    def __init__(self, channel: grpc.Channel):
        self._channel = channel

    def get(self, message: "Test") -> "Test":
        """
        Documentation of method 1
        other line 1

        Documentation of method 2
        other line 2

        Documentation of method 3
        """

        return self._channel.unary_unary(
            "/documentation.Service/get",
            Test.SerializeToString,
            Test.FromString,
        )(message)


class ServiceStub(betterproto2.ServiceStub):
    """
    Documentation of service 1
    other line 1

    Documentation of service 2
    other line 2

    Documentation of service 3
    """

    async def get(
        self,
        message: "Test",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "Test":
        """
        Documentation of method 1
        other line 1

        Documentation of method 2
        other line 2

        Documentation of method 3
        """

        return await self._unary_unary(
            "/documentation.Service/get",
            message,
            Test,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class ServiceBase(ServiceBase):
    """
    Documentation of service 1
    other line 1

    Documentation of service 2
    other line 2

    Documentation of service 3
    """

    async def get(self, message: "Test") -> "Test":
        """
        Documentation of method 1
        other line 1

        Documentation of method 2
        other line 2

        Documentation of method 3
        """

        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_get(self, stream: "grpclib.server.Stream[Test, Test]") -> None:
        request = await stream.recv_message()
        response = await self.get(request)
        await stream.send_message(response)

    def __mapping__(self) -> "dict[str, grpclib.const.Handler]":
        return {
            "/documentation.Service/get": grpclib.const.Handler(
                self.__rpc_get,
                grpclib.const.Cardinality.UNARY_UNARY,
                Test,
                Test,
            ),
        }
