# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: example_service.proto
# plugin: python-betterproto2
# This file has been @generated

__all__ = ("ExampleRequest", "ExampleResponse", "TestBase", "TestStub", "TestSyncStub")

from collections.abc import AsyncIterable, AsyncIterator, Iterable, Iterator
from dataclasses import dataclass
from typing import TYPE_CHECKING

import betterproto2
import grpc
import grpclib
from betterproto2.grpc.grpclib_server import ServiceBase

from ..message_pool import default_message_pool

if TYPE_CHECKING:
    import grpclib.server
    from betterproto2.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline

betterproto2.check_compiler_version("0.5.1")


@dataclass(eq=False, repr=False)
class ExampleRequest(betterproto2.Message):
    example_string: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    example_integer: "int" = betterproto2.field(2, betterproto2.TYPE_INT64)


default_message_pool.register_message("example_service", "ExampleRequest", ExampleRequest)


@dataclass(eq=False, repr=False)
class ExampleResponse(betterproto2.Message):
    example_string: "str" = betterproto2.field(1, betterproto2.TYPE_STRING)

    example_integer: "int" = betterproto2.field(2, betterproto2.TYPE_INT64)


default_message_pool.register_message("example_service", "ExampleResponse", ExampleResponse)


class TestSyncStub:
    def __init__(self, channel: grpc.Channel):
        self._channel = channel

    def example_unary_unary(self, message: "ExampleRequest") -> "ExampleResponse":
        return self._channel.unary_unary(
            "/example_service.Test/ExampleUnaryUnary",
            ExampleRequest.SerializeToString,
            ExampleResponse.FromString,
        )(message)

    def example_unary_stream(self, message: "ExampleRequest") -> "Iterator[ExampleResponse]":
        for response in self._channel.unary_stream(
            "/example_service.Test/ExampleUnaryStream",
            ExampleRequest.SerializeToString,
            ExampleResponse.FromString,
        )(message):
            yield response

    def example_stream_unary(self, messages: "Iterable[ExampleRequest]") -> "ExampleResponse":
        return self._channel.stream_unary(
            "/example_service.Test/ExampleStreamUnary",
            ExampleRequest.SerializeToString,
            ExampleResponse.FromString,
        )(iter(messages))

    def example_stream_stream(self, messages: "Iterable[ExampleRequest]") -> "Iterator[ExampleResponse]":
        for response in self._channel.stream_stream(
            "/example_service.Test/ExampleStreamStream",
            ExampleRequest.SerializeToString,
            ExampleResponse.FromString,
        )(iter(messages)):
            yield response


class TestStub(betterproto2.ServiceStub):
    async def example_unary_unary(
        self,
        message: "ExampleRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "ExampleResponse":
        return await self._unary_unary(
            "/example_service.Test/ExampleUnaryUnary",
            message,
            ExampleResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def example_unary_stream(
        self,
        message: "ExampleRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "AsyncIterator[ExampleResponse]":
        async for response in self._unary_stream(
            "/example_service.Test/ExampleUnaryStream",
            message,
            ExampleResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response

    async def example_stream_unary(
        self,
        messages: "AsyncIterable[ExampleRequest] | Iterable[ExampleRequest]",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "ExampleResponse":
        return await self._stream_unary(
            "/example_service.Test/ExampleStreamUnary",
            messages,
            ExampleRequest,
            ExampleResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def example_stream_stream(
        self,
        messages: "AsyncIterable[ExampleRequest] | Iterable[ExampleRequest]",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "AsyncIterator[ExampleResponse]":
        async for response in self._stream_stream(
            "/example_service.Test/ExampleStreamStream",
            messages,
            ExampleRequest,
            ExampleResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response


class TestBase(ServiceBase):
    async def example_unary_unary(self, message: "ExampleRequest") -> "ExampleResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def example_unary_stream(self, message: "ExampleRequest") -> "AsyncIterator[ExampleResponse]":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def example_stream_unary(self, messages: "AsyncIterator[ExampleRequest]") -> "ExampleResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def example_stream_stream(
        self, messages: "AsyncIterator[ExampleRequest]"
    ) -> "AsyncIterator[ExampleResponse]":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_example_unary_unary(self, stream: "grpclib.server.Stream[ExampleRequest, ExampleResponse]") -> None:
        request = await stream.recv_message()
        response = await self.example_unary_unary(request)
        await stream.send_message(response)

    async def __rpc_example_unary_stream(
        self, stream: "grpclib.server.Stream[ExampleRequest, ExampleResponse]"
    ) -> None:
        request = await stream.recv_message()
        await self._call_rpc_handler_server_stream(
            self.example_unary_stream,
            stream,
            request,
        )

    async def __rpc_example_stream_unary(
        self, stream: "grpclib.server.Stream[ExampleRequest, ExampleResponse]"
    ) -> None:
        request = stream.__aiter__()
        response = await self.example_stream_unary(request)
        await stream.send_message(response)

    async def __rpc_example_stream_stream(
        self, stream: "grpclib.server.Stream[ExampleRequest, ExampleResponse]"
    ) -> None:
        request = stream.__aiter__()
        await self._call_rpc_handler_server_stream(
            self.example_stream_stream,
            stream,
            request,
        )

    def __mapping__(self) -> "dict[str, grpclib.const.Handler]":
        return {
            "/example_service.Test/ExampleUnaryUnary": grpclib.const.Handler(
                self.__rpc_example_unary_unary,
                grpclib.const.Cardinality.UNARY_UNARY,
                ExampleRequest,
                ExampleResponse,
            ),
            "/example_service.Test/ExampleUnaryStream": grpclib.const.Handler(
                self.__rpc_example_unary_stream,
                grpclib.const.Cardinality.UNARY_STREAM,
                ExampleRequest,
                ExampleResponse,
            ),
            "/example_service.Test/ExampleStreamUnary": grpclib.const.Handler(
                self.__rpc_example_stream_unary,
                grpclib.const.Cardinality.STREAM_UNARY,
                ExampleRequest,
                ExampleResponse,
            ),
            "/example_service.Test/ExampleStreamStream": grpclib.const.Handler(
                self.__rpc_example_stream_stream,
                grpclib.const.Cardinality.STREAM_STREAM,
                ExampleRequest,
                ExampleResponse,
            ),
        }
