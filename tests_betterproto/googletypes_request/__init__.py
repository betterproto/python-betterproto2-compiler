# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: googletypes_request.proto
# plugin: python-betterproto2
# This file has been @generated

__all__ = ("Input", "TestBase", "TestStub", "TestSyncStub")

from dataclasses import dataclass
from typing import TYPE_CHECKING

import betterproto2
import grpc
import grpclib
from betterproto2.grpc.grpclib_server import ServiceBase

from ..message_pool import default_message_pool

if TYPE_CHECKING:
    import grpclib.server
    from betterproto2.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline

betterproto2.check_compiler_version("0.5.1")


@dataclass(eq=False, repr=False)
class Input(betterproto2.Message):
    pass


default_message_pool.register_message("googletypes_request", "Input", Input)


class TestSyncStub:
    """
    Tests that google types can be used as params
    """

    def __init__(self, channel: grpc.Channel):
        self._channel = channel

    def send_double(self, message: "_google__protobuf__.DoubleValue") -> "Input":
        return self._channel.unary_unary(
            "/googletypes_request.Test/SendDouble",
            _google__protobuf__.DoubleValue.SerializeToString,
            Input.FromString,
        )(message)

    def send_float(self, message: "_google__protobuf__.FloatValue") -> "Input":
        return self._channel.unary_unary(
            "/googletypes_request.Test/SendFloat",
            _google__protobuf__.FloatValue.SerializeToString,
            Input.FromString,
        )(message)

    def send_int_64(self, message: "_google__protobuf__.Int64Value") -> "Input":
        return self._channel.unary_unary(
            "/googletypes_request.Test/SendInt64",
            _google__protobuf__.Int64Value.SerializeToString,
            Input.FromString,
        )(message)

    def send_u_int_64(self, message: "_google__protobuf__.UInt64Value") -> "Input":
        return self._channel.unary_unary(
            "/googletypes_request.Test/SendUInt64",
            _google__protobuf__.UInt64Value.SerializeToString,
            Input.FromString,
        )(message)

    def send_int_32(self, message: "_google__protobuf__.Int32Value") -> "Input":
        return self._channel.unary_unary(
            "/googletypes_request.Test/SendInt32",
            _google__protobuf__.Int32Value.SerializeToString,
            Input.FromString,
        )(message)

    def send_u_int_32(self, message: "_google__protobuf__.UInt32Value") -> "Input":
        return self._channel.unary_unary(
            "/googletypes_request.Test/SendUInt32",
            _google__protobuf__.UInt32Value.SerializeToString,
            Input.FromString,
        )(message)

    def send_bool(self, message: "_google__protobuf__.BoolValue") -> "Input":
        return self._channel.unary_unary(
            "/googletypes_request.Test/SendBool",
            _google__protobuf__.BoolValue.SerializeToString,
            Input.FromString,
        )(message)

    def send_string(self, message: "_google__protobuf__.StringValue") -> "Input":
        return self._channel.unary_unary(
            "/googletypes_request.Test/SendString",
            _google__protobuf__.StringValue.SerializeToString,
            Input.FromString,
        )(message)

    def send_bytes(self, message: "_google__protobuf__.BytesValue") -> "Input":
        return self._channel.unary_unary(
            "/googletypes_request.Test/SendBytes",
            _google__protobuf__.BytesValue.SerializeToString,
            Input.FromString,
        )(message)

    def send_datetime(self, message: "_google__protobuf__.Timestamp") -> "Input":
        return self._channel.unary_unary(
            "/googletypes_request.Test/SendDatetime",
            _google__protobuf__.Timestamp.SerializeToString,
            Input.FromString,
        )(message)

    def send_timedelta(self, message: "_google__protobuf__.Duration") -> "Input":
        return self._channel.unary_unary(
            "/googletypes_request.Test/SendTimedelta",
            _google__protobuf__.Duration.SerializeToString,
            Input.FromString,
        )(message)

    def send_empty(self, message: "_google__protobuf__.Empty | None" = None) -> "Input":
        if message is None:
            message = _google__protobuf__.Empty()

        return self._channel.unary_unary(
            "/googletypes_request.Test/SendEmpty",
            _google__protobuf__.Empty.SerializeToString,
            Input.FromString,
        )(message)


class TestStub(betterproto2.ServiceStub):
    """
    Tests that google types can be used as params
    """

    async def send_double(
        self,
        message: "_google__protobuf__.DoubleValue",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "Input":
        return await self._unary_unary(
            "/googletypes_request.Test/SendDouble",
            message,
            Input,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def send_float(
        self,
        message: "_google__protobuf__.FloatValue",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "Input":
        return await self._unary_unary(
            "/googletypes_request.Test/SendFloat",
            message,
            Input,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def send_int_64(
        self,
        message: "_google__protobuf__.Int64Value",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "Input":
        return await self._unary_unary(
            "/googletypes_request.Test/SendInt64",
            message,
            Input,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def send_u_int_64(
        self,
        message: "_google__protobuf__.UInt64Value",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "Input":
        return await self._unary_unary(
            "/googletypes_request.Test/SendUInt64",
            message,
            Input,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def send_int_32(
        self,
        message: "_google__protobuf__.Int32Value",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "Input":
        return await self._unary_unary(
            "/googletypes_request.Test/SendInt32",
            message,
            Input,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def send_u_int_32(
        self,
        message: "_google__protobuf__.UInt32Value",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "Input":
        return await self._unary_unary(
            "/googletypes_request.Test/SendUInt32",
            message,
            Input,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def send_bool(
        self,
        message: "_google__protobuf__.BoolValue",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "Input":
        return await self._unary_unary(
            "/googletypes_request.Test/SendBool",
            message,
            Input,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def send_string(
        self,
        message: "_google__protobuf__.StringValue",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "Input":
        return await self._unary_unary(
            "/googletypes_request.Test/SendString",
            message,
            Input,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def send_bytes(
        self,
        message: "_google__protobuf__.BytesValue",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "Input":
        return await self._unary_unary(
            "/googletypes_request.Test/SendBytes",
            message,
            Input,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def send_datetime(
        self,
        message: "_google__protobuf__.Timestamp",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "Input":
        return await self._unary_unary(
            "/googletypes_request.Test/SendDatetime",
            message,
            Input,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def send_timedelta(
        self,
        message: "_google__protobuf__.Duration",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "Input":
        return await self._unary_unary(
            "/googletypes_request.Test/SendTimedelta",
            message,
            Input,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def send_empty(
        self,
        message: "_google__protobuf__.Empty | None" = None,
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "Input":
        if message is None:
            message = _google__protobuf__.Empty()

        return await self._unary_unary(
            "/googletypes_request.Test/SendEmpty",
            message,
            Input,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


from ..google import protobuf as _google__protobuf__


class TestBase(ServiceBase):
    """
    Tests that google types can be used as params
    """

    async def send_double(self, message: "_google__protobuf__.DoubleValue") -> "Input":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def send_float(self, message: "_google__protobuf__.FloatValue") -> "Input":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def send_int_64(self, message: "_google__protobuf__.Int64Value") -> "Input":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def send_u_int_64(self, message: "_google__protobuf__.UInt64Value") -> "Input":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def send_int_32(self, message: "_google__protobuf__.Int32Value") -> "Input":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def send_u_int_32(self, message: "_google__protobuf__.UInt32Value") -> "Input":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def send_bool(self, message: "_google__protobuf__.BoolValue") -> "Input":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def send_string(self, message: "_google__protobuf__.StringValue") -> "Input":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def send_bytes(self, message: "_google__protobuf__.BytesValue") -> "Input":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def send_datetime(self, message: "_google__protobuf__.Timestamp") -> "Input":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def send_timedelta(self, message: "_google__protobuf__.Duration") -> "Input":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def send_empty(self, message: "_google__protobuf__.Empty") -> "Input":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_send_double(self, stream: "grpclib.server.Stream[_google__protobuf__.DoubleValue, Input]") -> None:
        request = await stream.recv_message()
        response = await self.send_double(request)
        await stream.send_message(response)

    async def __rpc_send_float(self, stream: "grpclib.server.Stream[_google__protobuf__.FloatValue, Input]") -> None:
        request = await stream.recv_message()
        response = await self.send_float(request)
        await stream.send_message(response)

    async def __rpc_send_int_64(self, stream: "grpclib.server.Stream[_google__protobuf__.Int64Value, Input]") -> None:
        request = await stream.recv_message()
        response = await self.send_int_64(request)
        await stream.send_message(response)

    async def __rpc_send_u_int_64(
        self, stream: "grpclib.server.Stream[_google__protobuf__.UInt64Value, Input]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.send_u_int_64(request)
        await stream.send_message(response)

    async def __rpc_send_int_32(self, stream: "grpclib.server.Stream[_google__protobuf__.Int32Value, Input]") -> None:
        request = await stream.recv_message()
        response = await self.send_int_32(request)
        await stream.send_message(response)

    async def __rpc_send_u_int_32(
        self, stream: "grpclib.server.Stream[_google__protobuf__.UInt32Value, Input]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.send_u_int_32(request)
        await stream.send_message(response)

    async def __rpc_send_bool(self, stream: "grpclib.server.Stream[_google__protobuf__.BoolValue, Input]") -> None:
        request = await stream.recv_message()
        response = await self.send_bool(request)
        await stream.send_message(response)

    async def __rpc_send_string(self, stream: "grpclib.server.Stream[_google__protobuf__.StringValue, Input]") -> None:
        request = await stream.recv_message()
        response = await self.send_string(request)
        await stream.send_message(response)

    async def __rpc_send_bytes(self, stream: "grpclib.server.Stream[_google__protobuf__.BytesValue, Input]") -> None:
        request = await stream.recv_message()
        response = await self.send_bytes(request)
        await stream.send_message(response)

    async def __rpc_send_datetime(self, stream: "grpclib.server.Stream[_google__protobuf__.Timestamp, Input]") -> None:
        request = await stream.recv_message()
        response = await self.send_datetime(request)
        await stream.send_message(response)

    async def __rpc_send_timedelta(self, stream: "grpclib.server.Stream[_google__protobuf__.Duration, Input]") -> None:
        request = await stream.recv_message()
        response = await self.send_timedelta(request)
        await stream.send_message(response)

    async def __rpc_send_empty(self, stream: "grpclib.server.Stream[_google__protobuf__.Empty, Input]") -> None:
        request = await stream.recv_message()
        response = await self.send_empty(request)
        await stream.send_message(response)

    def __mapping__(self) -> "dict[str, grpclib.const.Handler]":
        return {
            "/googletypes_request.Test/SendDouble": grpclib.const.Handler(
                self.__rpc_send_double,
                grpclib.const.Cardinality.UNARY_UNARY,
                _google__protobuf__.DoubleValue,
                Input,
            ),
            "/googletypes_request.Test/SendFloat": grpclib.const.Handler(
                self.__rpc_send_float,
                grpclib.const.Cardinality.UNARY_UNARY,
                _google__protobuf__.FloatValue,
                Input,
            ),
            "/googletypes_request.Test/SendInt64": grpclib.const.Handler(
                self.__rpc_send_int_64,
                grpclib.const.Cardinality.UNARY_UNARY,
                _google__protobuf__.Int64Value,
                Input,
            ),
            "/googletypes_request.Test/SendUInt64": grpclib.const.Handler(
                self.__rpc_send_u_int_64,
                grpclib.const.Cardinality.UNARY_UNARY,
                _google__protobuf__.UInt64Value,
                Input,
            ),
            "/googletypes_request.Test/SendInt32": grpclib.const.Handler(
                self.__rpc_send_int_32,
                grpclib.const.Cardinality.UNARY_UNARY,
                _google__protobuf__.Int32Value,
                Input,
            ),
            "/googletypes_request.Test/SendUInt32": grpclib.const.Handler(
                self.__rpc_send_u_int_32,
                grpclib.const.Cardinality.UNARY_UNARY,
                _google__protobuf__.UInt32Value,
                Input,
            ),
            "/googletypes_request.Test/SendBool": grpclib.const.Handler(
                self.__rpc_send_bool,
                grpclib.const.Cardinality.UNARY_UNARY,
                _google__protobuf__.BoolValue,
                Input,
            ),
            "/googletypes_request.Test/SendString": grpclib.const.Handler(
                self.__rpc_send_string,
                grpclib.const.Cardinality.UNARY_UNARY,
                _google__protobuf__.StringValue,
                Input,
            ),
            "/googletypes_request.Test/SendBytes": grpclib.const.Handler(
                self.__rpc_send_bytes,
                grpclib.const.Cardinality.UNARY_UNARY,
                _google__protobuf__.BytesValue,
                Input,
            ),
            "/googletypes_request.Test/SendDatetime": grpclib.const.Handler(
                self.__rpc_send_datetime,
                grpclib.const.Cardinality.UNARY_UNARY,
                _google__protobuf__.Timestamp,
                Input,
            ),
            "/googletypes_request.Test/SendTimedelta": grpclib.const.Handler(
                self.__rpc_send_timedelta,
                grpclib.const.Cardinality.UNARY_UNARY,
                _google__protobuf__.Duration,
                Input,
            ),
            "/googletypes_request.Test/SendEmpty": grpclib.const.Handler(
                self.__rpc_send_empty,
                grpclib.const.Cardinality.UNARY_UNARY,
                _google__protobuf__.Empty,
                Input,
            ),
        }
