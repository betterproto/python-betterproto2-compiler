class {% block class_name %}{% endblock %}({% block inherit_from %}{% endblock %}):
    {% block service_docstring scoped %}
    {% if service.comment %}
    """
    {{ service.comment | indent(4) }}
    """
    {% elif not service.methods %}
    pass
    {% endif %}
    {% endblock %}

    {% block class_content %}{% endblock %}

    {% for method in service.methods %}
    {% block method_definition scoped required %}{% endblock %}
        {% block method_docstring scoped %}
        {% if method.comment %}
        """
        {{ method.comment | indent(8) }}
        """
        {% endif %}
        {% endblock %}

        {% block deprecation_warning scoped %}
        {% if method.deprecated %}
        warnings.warn("{{ service.py_name }}.{{ method.py_name }} is deprecated", DeprecationWarning)
        {% endif %}
        {% endblock %}

        {% if method.server_streaming %}
            {% if method.client_streaming %}
        async for response in self._stream_stream(
            "{{ method.route }}",
            messages,
            {{ method.py_input_message_type }},
            {{ method.py_output_message_type }},
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response
            {% else %}{# i.e. not client streaming #}
        {% if method.is_input_msg_empty %}
        if message is None:
            message = {{ method.py_input_message_type }}()

        {% endif %}
        async for response in self._unary_stream(
            "{{ method.route }}",
            message,
            {{ method.py_output_message_type }},
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response

            {% endif %}{# if client streaming #}
        {% else %}{# i.e. not server streaming #}
            {% if method.client_streaming %}
        return await self._stream_unary(
            "{{ method.route }}",
            messages,
            {{ method.py_input_message_type }},
            {{ method.py_output_message_type }},
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )
            {% else %}{# i.e. not client streaming #}
        {% if method.is_input_msg_empty %}
        if message is None:
            message = {{ method.py_input_message_type }}()

        {% endif %}
        return await self._unary_unary(
            "{{ method.route }}",
            message,
            {{ method.py_output_message_type }},
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )
            {% endif %}{# client streaming #}
        {% endif %}

    {% endfor %}