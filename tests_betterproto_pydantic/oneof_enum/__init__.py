# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: oneof_enum.proto
# plugin: python-betterproto2
# This file has been @generated

__all__ = ("Move", "Signal", "Test")

import typing

import betterproto2
import pydantic
from pydantic import model_validator
from pydantic.dataclasses import dataclass

from ..message_pool import default_message_pool

betterproto2.check_compiler_version("0.5.1")


class Signal(betterproto2.Enum):
    PASS = 0

    RESIGN = 1

    @classmethod
    def __get_pydantic_core_schema__(cls, _source_type, _handler):
        from pydantic_core import core_schema

        return core_schema.int_schema(ge=0)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class Move(betterproto2.Message):
    x: "typing.Annotated[int, pydantic.Field(ge=-2**31, le=2**31 - 1)]" = betterproto2.field(1, betterproto2.TYPE_INT32)

    y: "typing.Annotated[int, pydantic.Field(ge=-2**31, le=2**31 - 1)]" = betterproto2.field(2, betterproto2.TYPE_INT32)


default_message_pool.register_message("oneof_enum", "Move", Move)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class Test(betterproto2.Message):
    """


    Oneofs:
        - action:
    """

    signal: "Signal | None" = betterproto2.field(1, betterproto2.TYPE_ENUM, optional=True, group="action")

    move: "Move | None" = betterproto2.field(2, betterproto2.TYPE_MESSAGE, optional=True, group="action")

    @model_validator(mode="after")
    def check_oneof(cls, values):
        return cls._validate_field_groups(values)


default_message_pool.register_message("oneof_enum", "Test", Test)
