# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: service.proto
# plugin: python-betterproto2
# This file has been @generated

__all__ = ("DoThingRequest", "DoThingResponse", "TestBase", "TestStub", "TestSyncStub")

import typing
from typing import TYPE_CHECKING

import betterproto2
import grpc
import grpclib
import pydantic
from betterproto2.grpc.grpclib_server import ServiceBase
from pydantic.dataclasses import dataclass

from ..message_pool import default_message_pool

if TYPE_CHECKING:
    import grpclib.server
    from betterproto2.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline

betterproto2.check_compiler_version("0.5.1")


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class DoThingRequest(betterproto2.Message):
    name: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = (
        betterproto2.field(1, betterproto2.TYPE_STRING)
    )

    comments: "list[typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]]" = (
        betterproto2.field(2, betterproto2.TYPE_STRING, repeated=True)
    )


default_message_pool.register_message("service_uppercase", "DoTHINGRequest", DoThingRequest)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class DoThingResponse(betterproto2.Message):
    names: "list[typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]]" = (
        betterproto2.field(1, betterproto2.TYPE_STRING, repeated=True)
    )


default_message_pool.register_message("service_uppercase", "DoTHINGResponse", DoThingResponse)


class TestSyncStub:
    def __init__(self, channel: grpc.Channel):
        self._channel = channel

    def do_thing(self, message: "DoThingRequest") -> "DoThingResponse":
        return self._channel.unary_unary(
            "/service_uppercase.Test/DoThing",
            DoThingRequest.SerializeToString,
            DoThingResponse.FromString,
        )(message)


class TestStub(betterproto2.ServiceStub):
    async def do_thing(
        self,
        message: "DoThingRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "DoThingResponse":
        return await self._unary_unary(
            "/service_uppercase.Test/DoThing",
            message,
            DoThingResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class TestBase(ServiceBase):
    async def do_thing(self, message: "DoThingRequest") -> "DoThingResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_do_thing(self, stream: "grpclib.server.Stream[DoThingRequest, DoThingResponse]") -> None:
        request = await stream.recv_message()
        response = await self.do_thing(request)
        await stream.send_message(response)

    def __mapping__(self) -> "dict[str, grpclib.const.Handler]":
        return {
            "/service_uppercase.Test/DoThing": grpclib.const.Handler(
                self.__rpc_do_thing,
                grpclib.const.Cardinality.UNARY_UNARY,
                DoThingRequest,
                DoThingResponse,
            ),
        }
