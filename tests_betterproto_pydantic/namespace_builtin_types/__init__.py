# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: namespace_builtin_types.proto
# plugin: python-betterproto2
# This file has been @generated

__all__ = ("Test",)

import builtins
import typing

import betterproto2
import pydantic
from pydantic.dataclasses import dataclass

from ..message_pool import default_message_pool

betterproto2.check_compiler_version("0.5.1")


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class Test(betterproto2.Message):
    """
    Tests that messages may contain fields with names that are python types
    """

    int: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = betterproto2.field(
        1, betterproto2.TYPE_STRING
    )
    """
    https://docs.python.org/2/library/stdtypes.html#numeric-types-int-float-long-complex
    """

    float: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = (
        betterproto2.field(2, betterproto2.TYPE_STRING)
    )

    complex: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = (
        betterproto2.field(3, betterproto2.TYPE_STRING)
    )

    list: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = (
        betterproto2.field(4, betterproto2.TYPE_STRING)
    )
    """
    https://docs.python.org/3/library/stdtypes.html#sequence-types-list-tuple-range
    """

    tuple: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = (
        betterproto2.field(5, betterproto2.TYPE_STRING)
    )

    range: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = (
        betterproto2.field(6, betterproto2.TYPE_STRING)
    )

    str: "typing.Annotated[builtins.str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = (
        betterproto2.field(7, betterproto2.TYPE_STRING)
    )
    """
    https://docs.python.org/3/library/stdtypes.html#str
    """

    bytearray: "typing.Annotated[builtins.str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = (
        betterproto2.field(8, betterproto2.TYPE_STRING)
    )
    """
    https://docs.python.org/3/library/stdtypes.html#bytearray-objects
    """

    bytes: "typing.Annotated[builtins.str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = (
        betterproto2.field(9, betterproto2.TYPE_STRING)
    )
    """
    https://docs.python.org/3/library/stdtypes.html#bytes-and-bytearray-operations
    """

    memoryview: "typing.Annotated[builtins.str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = (
        betterproto2.field(10, betterproto2.TYPE_STRING)
    )
    """
    https://docs.python.org/3/library/stdtypes.html#memory-views
    """

    set: "typing.Annotated[builtins.str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = (
        betterproto2.field(11, betterproto2.TYPE_STRING)
    )
    """
    https://docs.python.org/3/library/stdtypes.html#set-types-set-frozenset
    """

    frozenset: "typing.Annotated[builtins.str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = (
        betterproto2.field(12, betterproto2.TYPE_STRING)
    )

    map: "typing.Annotated[builtins.str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = (
        betterproto2.field(13, betterproto2.TYPE_STRING)
    )
    """
    https://docs.python.org/3/library/stdtypes.html#dict
    """

    dict: "typing.Annotated[builtins.str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = (
        betterproto2.field(14, betterproto2.TYPE_STRING)
    )

    bool: "typing.Annotated[builtins.str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = (
        betterproto2.field(15, betterproto2.TYPE_STRING)
    )
    """
    https://docs.python.org/3/library/stdtypes.html#boolean-values
    """


default_message_pool.register_message("namespace_builtin_types", "Test", Test)
