# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: google_impl_behavior_equivalence.proto
# plugin: python-betterproto2
# This file has been @generated

__all__ = (
    "Empty",
    "Foo",
    "Request",
    "Spam",
    "Test",
)

import datetime
import typing

import betterproto2
import pydantic
from pydantic import model_validator
from pydantic.dataclasses import dataclass

from ..message_pool import default_message_pool

betterproto2.check_compiler_version("0.5.1")


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class Empty(betterproto2.Message):
    pass


default_message_pool.register_message("google_impl_behavior_equivalence", "Empty", Empty)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class Foo(betterproto2.Message):
    bar: "typing.Annotated[int, pydantic.Field(ge=-2**63, le=2**63 - 1)]" = betterproto2.field(
        1, betterproto2.TYPE_INT64
    )


default_message_pool.register_message("google_impl_behavior_equivalence", "Foo", Foo)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class Request(betterproto2.Message):
    foo: "Empty | None" = betterproto2.field(1, betterproto2.TYPE_MESSAGE, optional=True)


default_message_pool.register_message("google_impl_behavior_equivalence", "Request", Request)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class Spam(betterproto2.Message):
    ts: "datetime.datetime | None" = betterproto2.field(
        1, betterproto2.TYPE_MESSAGE, unwrap=lambda: _google__protobuf__.Timestamp, optional=True
    )


default_message_pool.register_message("google_impl_behavior_equivalence", "Spam", Spam)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class Test(betterproto2.Message):
    """


    Oneofs:
        - group:
    """

    string: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)] | None" = (
        betterproto2.field(1, betterproto2.TYPE_STRING, optional=True, group="group")
    )

    integer: "typing.Annotated[int, pydantic.Field(ge=-2**63, le=2**63 - 1)] | None" = betterproto2.field(
        2, betterproto2.TYPE_INT64, optional=True, group="group"
    )

    foo: "Foo | None" = betterproto2.field(3, betterproto2.TYPE_MESSAGE, optional=True, group="group")

    @model_validator(mode="after")
    def check_oneof(cls, values):
        return cls._validate_field_groups(values)


default_message_pool.register_message("google_impl_behavior_equivalence", "Test", Test)


from ..google import protobuf as _google__protobuf__
