# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: simple_service.proto
# plugin: python-betterproto2
# This file has been @generated

__all__ = ("Request", "Response", "SimpleServiceBase", "SimpleServiceStub", "SimpleServiceSyncStub")

import typing
from collections.abc import AsyncIterable, AsyncIterator, Iterable, Iterator
from typing import TYPE_CHECKING

import betterproto2
import grpc
import grpclib
import pydantic
from betterproto2.grpc.grpclib_server import ServiceBase
from pydantic.dataclasses import dataclass

from ..message_pool import default_message_pool

if TYPE_CHECKING:
    import grpclib.server
    from betterproto2.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline

betterproto2.check_compiler_version("0.5.1")


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class Request(betterproto2.Message):
    value: "typing.Annotated[int, pydantic.Field(ge=-2**31, le=2**31 - 1)]" = betterproto2.field(
        1, betterproto2.TYPE_INT32
    )


default_message_pool.register_message("simple_service", "Request", Request)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class Response(betterproto2.Message):
    message: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = (
        betterproto2.field(1, betterproto2.TYPE_STRING)
    )


default_message_pool.register_message("simple_service", "Response", Response)


class SimpleServiceSyncStub:
    def __init__(self, channel: grpc.Channel):
        self._channel = channel

    def get_unary_unary(self, message: "Request") -> "Response":
        return self._channel.unary_unary(
            "/simple_service.SimpleService/GetUnaryUnary",
            Request.SerializeToString,
            Response.FromString,
        )(message)

    def get_unary_stream(self, message: "Request") -> "Iterator[Response]":
        for response in self._channel.unary_stream(
            "/simple_service.SimpleService/GetUnaryStream",
            Request.SerializeToString,
            Response.FromString,
        )(message):
            yield response

    def get_stream_unary(self, messages: "Iterable[Request]") -> "Response":
        return self._channel.stream_unary(
            "/simple_service.SimpleService/GetStreamUnary",
            Request.SerializeToString,
            Response.FromString,
        )(iter(messages))

    def get_stream_stream(self, messages: "Iterable[Request]") -> "Iterator[Response]":
        for response in self._channel.stream_stream(
            "/simple_service.SimpleService/GetStreamStream",
            Request.SerializeToString,
            Response.FromString,
        )(iter(messages)):
            yield response


class SimpleServiceStub(betterproto2.ServiceStub):
    async def get_unary_unary(
        self,
        message: "Request",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "Response":
        return await self._unary_unary(
            "/simple_service.SimpleService/GetUnaryUnary",
            message,
            Response,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_unary_stream(
        self,
        message: "Request",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "AsyncIterator[Response]":
        async for response in self._unary_stream(
            "/simple_service.SimpleService/GetUnaryStream",
            message,
            Response,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response

    async def get_stream_unary(
        self,
        messages: "AsyncIterable[Request] | Iterable[Request]",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "Response":
        return await self._stream_unary(
            "/simple_service.SimpleService/GetStreamUnary",
            messages,
            Request,
            Response,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_stream_stream(
        self,
        messages: "AsyncIterable[Request] | Iterable[Request]",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "AsyncIterator[Response]":
        async for response in self._stream_stream(
            "/simple_service.SimpleService/GetStreamStream",
            messages,
            Request,
            Response,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response


class SimpleServiceBase(ServiceBase):
    async def get_unary_unary(self, message: "Request") -> "Response":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_unary_stream(self, message: "Request") -> "AsyncIterator[Response]":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_stream_unary(self, messages: "AsyncIterator[Request]") -> "Response":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_stream_stream(self, messages: "AsyncIterator[Request]") -> "AsyncIterator[Response]":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_get_unary_unary(self, stream: "grpclib.server.Stream[Request, Response]") -> None:
        request = await stream.recv_message()
        response = await self.get_unary_unary(request)
        await stream.send_message(response)

    async def __rpc_get_unary_stream(self, stream: "grpclib.server.Stream[Request, Response]") -> None:
        request = await stream.recv_message()
        await self._call_rpc_handler_server_stream(
            self.get_unary_stream,
            stream,
            request,
        )

    async def __rpc_get_stream_unary(self, stream: "grpclib.server.Stream[Request, Response]") -> None:
        request = stream.__aiter__()
        response = await self.get_stream_unary(request)
        await stream.send_message(response)

    async def __rpc_get_stream_stream(self, stream: "grpclib.server.Stream[Request, Response]") -> None:
        request = stream.__aiter__()
        await self._call_rpc_handler_server_stream(
            self.get_stream_stream,
            stream,
            request,
        )

    def __mapping__(self) -> "dict[str, grpclib.const.Handler]":
        return {
            "/simple_service.SimpleService/GetUnaryUnary": grpclib.const.Handler(
                self.__rpc_get_unary_unary,
                grpclib.const.Cardinality.UNARY_UNARY,
                Request,
                Response,
            ),
            "/simple_service.SimpleService/GetUnaryStream": grpclib.const.Handler(
                self.__rpc_get_unary_stream,
                grpclib.const.Cardinality.UNARY_STREAM,
                Request,
                Response,
            ),
            "/simple_service.SimpleService/GetStreamUnary": grpclib.const.Handler(
                self.__rpc_get_stream_unary,
                grpclib.const.Cardinality.STREAM_UNARY,
                Request,
                Response,
            ),
            "/simple_service.SimpleService/GetStreamStream": grpclib.const.Handler(
                self.__rpc_get_stream_stream,
                grpclib.const.Cardinality.STREAM_STREAM,
                Request,
                Response,
            ),
        }
