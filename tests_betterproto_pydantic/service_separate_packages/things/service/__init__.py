# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: service.proto
# plugin: python-betterproto2
# This file has been @generated

__all__ = ("TestBase", "TestStub", "TestSyncStub")

from collections.abc import AsyncIterable, AsyncIterator, Iterable, Iterator
from typing import TYPE_CHECKING

import betterproto2
import grpc
import grpclib
from betterproto2.grpc.grpclib_server import ServiceBase

if TYPE_CHECKING:
    import grpclib.server
    from betterproto2.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline

betterproto2.check_compiler_version("0.5.1")


class TestSyncStub:
    def __init__(self, channel: grpc.Channel):
        self._channel = channel

    def do_thing(self, message: "_messages__.DoThingRequest") -> "_messages__.DoThingResponse":
        return self._channel.unary_unary(
            "/service_separate_packages.things.service.Test/DoThing",
            _messages__.DoThingRequest.SerializeToString,
            _messages__.DoThingResponse.FromString,
        )(message)

    def do_many_things(self, messages: "Iterable[_messages__.DoThingRequest]") -> "_messages__.DoThingResponse":
        return self._channel.stream_unary(
            "/service_separate_packages.things.service.Test/DoManyThings",
            _messages__.DoThingRequest.SerializeToString,
            _messages__.DoThingResponse.FromString,
        )(iter(messages))

    def get_thing_versions(self, message: "_messages__.GetThingRequest") -> "Iterator[_messages__.GetThingResponse]":
        for response in self._channel.unary_stream(
            "/service_separate_packages.things.service.Test/GetThingVersions",
            _messages__.GetThingRequest.SerializeToString,
            _messages__.GetThingResponse.FromString,
        )(message):
            yield response

    def get_different_things(
        self, messages: "Iterable[_messages__.GetThingRequest]"
    ) -> "Iterator[_messages__.GetThingResponse]":
        for response in self._channel.stream_stream(
            "/service_separate_packages.things.service.Test/GetDifferentThings",
            _messages__.GetThingRequest.SerializeToString,
            _messages__.GetThingResponse.FromString,
        )(iter(messages)):
            yield response


class TestStub(betterproto2.ServiceStub):
    async def do_thing(
        self,
        message: "_messages__.DoThingRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "_messages__.DoThingResponse":
        return await self._unary_unary(
            "/service_separate_packages.things.service.Test/DoThing",
            message,
            _messages__.DoThingResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def do_many_things(
        self,
        messages: "AsyncIterable[_messages__.DoThingRequest] | Iterable[_messages__.DoThingRequest]",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "_messages__.DoThingResponse":
        return await self._stream_unary(
            "/service_separate_packages.things.service.Test/DoManyThings",
            messages,
            _messages__.DoThingRequest,
            _messages__.DoThingResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_thing_versions(
        self,
        message: "_messages__.GetThingRequest",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "AsyncIterator[_messages__.GetThingResponse]":
        async for response in self._unary_stream(
            "/service_separate_packages.things.service.Test/GetThingVersions",
            message,
            _messages__.GetThingResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response

    async def get_different_things(
        self,
        messages: "AsyncIterable[_messages__.GetThingRequest] | Iterable[_messages__.GetThingRequest]",
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "AsyncIterator[_messages__.GetThingResponse]":
        async for response in self._stream_stream(
            "/service_separate_packages.things.service.Test/GetDifferentThings",
            messages,
            _messages__.GetThingRequest,
            _messages__.GetThingResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response


from .. import messages as _messages__


class TestBase(ServiceBase):
    async def do_thing(self, message: "_messages__.DoThingRequest") -> "_messages__.DoThingResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def do_many_things(
        self, messages: "AsyncIterator[_messages__.DoThingRequest]"
    ) -> "_messages__.DoThingResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_thing_versions(
        self, message: "_messages__.GetThingRequest"
    ) -> "AsyncIterator[_messages__.GetThingResponse]":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_different_things(
        self, messages: "AsyncIterator[_messages__.GetThingRequest]"
    ) -> "AsyncIterator[_messages__.GetThingResponse]":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_do_thing(
        self, stream: "grpclib.server.Stream[_messages__.DoThingRequest, _messages__.DoThingResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.do_thing(request)
        await stream.send_message(response)

    async def __rpc_do_many_things(
        self, stream: "grpclib.server.Stream[_messages__.DoThingRequest, _messages__.DoThingResponse]"
    ) -> None:
        request = stream.__aiter__()
        response = await self.do_many_things(request)
        await stream.send_message(response)

    async def __rpc_get_thing_versions(
        self, stream: "grpclib.server.Stream[_messages__.GetThingRequest, _messages__.GetThingResponse]"
    ) -> None:
        request = await stream.recv_message()
        await self._call_rpc_handler_server_stream(
            self.get_thing_versions,
            stream,
            request,
        )

    async def __rpc_get_different_things(
        self, stream: "grpclib.server.Stream[_messages__.GetThingRequest, _messages__.GetThingResponse]"
    ) -> None:
        request = stream.__aiter__()
        await self._call_rpc_handler_server_stream(
            self.get_different_things,
            stream,
            request,
        )

    def __mapping__(self) -> "dict[str, grpclib.const.Handler]":
        return {
            "/service_separate_packages.things.service.Test/DoThing": grpclib.const.Handler(
                self.__rpc_do_thing,
                grpclib.const.Cardinality.UNARY_UNARY,
                _messages__.DoThingRequest,
                _messages__.DoThingResponse,
            ),
            "/service_separate_packages.things.service.Test/DoManyThings": grpclib.const.Handler(
                self.__rpc_do_many_things,
                grpclib.const.Cardinality.STREAM_UNARY,
                _messages__.DoThingRequest,
                _messages__.DoThingResponse,
            ),
            "/service_separate_packages.things.service.Test/GetThingVersions": grpclib.const.Handler(
                self.__rpc_get_thing_versions,
                grpclib.const.Cardinality.UNARY_STREAM,
                _messages__.GetThingRequest,
                _messages__.GetThingResponse,
            ),
            "/service_separate_packages.things.service.Test/GetDifferentThings": grpclib.const.Handler(
                self.__rpc_get_different_things,
                grpclib.const.Cardinality.STREAM_STREAM,
                _messages__.GetThingRequest,
                _messages__.GetThingResponse,
            ),
        }
