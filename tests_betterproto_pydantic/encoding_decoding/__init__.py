# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: encoding_decoding.proto
# plugin: python-betterproto2
# This file has been @generated

__all__ = (
    "Overflow32",
    "Overflow64",
)

import builtins
import typing

import betterproto2
import pydantic
from pydantic.dataclasses import dataclass

from ..message_pool import default_message_pool

betterproto2.check_compiler_version("0.5.1")


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class Overflow32(betterproto2.Message):
    uint: "typing.Annotated[int, pydantic.Field(ge=0, le=2**32 - 1)]" = betterproto2.field(1, betterproto2.TYPE_UINT32)

    int: "typing.Annotated[builtins.int, pydantic.Field(ge=-2**31, le=2**31 - 1)]" = betterproto2.field(
        2, betterproto2.TYPE_INT32
    )

    sint: "typing.Annotated[builtins.int, pydantic.Field(ge=-2**31, le=2**31 - 1)]" = betterproto2.field(
        3, betterproto2.TYPE_SINT32
    )


default_message_pool.register_message("encoding_decoding", "Overflow32", Overflow32)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class Overflow64(betterproto2.Message):
    uint: "typing.Annotated[int, pydantic.Field(ge=0, le=2**64 - 1)]" = betterproto2.field(1, betterproto2.TYPE_UINT64)

    int: "typing.Annotated[builtins.int, pydantic.Field(ge=-2**63, le=2**63 - 1)]" = betterproto2.field(
        2, betterproto2.TYPE_INT64
    )

    sint: "typing.Annotated[builtins.int, pydantic.Field(ge=-2**63, le=2**63 - 1)]" = betterproto2.field(
        3, betterproto2.TYPE_SINT64
    )


default_message_pool.register_message("encoding_decoding", "Overflow64", Overflow64)
