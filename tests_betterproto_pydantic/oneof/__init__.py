# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: oneof.proto
# plugin: python-betterproto2
# This file has been @generated

__all__ = (
    "MixedDrink",
    "Test",
)

import typing

import betterproto2
import pydantic
from pydantic import model_validator
from pydantic.dataclasses import dataclass

from ..message_pool import default_message_pool

betterproto2.check_compiler_version("0.5.1")


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class MixedDrink(betterproto2.Message):
    shots: "typing.Annotated[int, pydantic.Field(ge=-2**31, le=2**31 - 1)]" = betterproto2.field(
        1, betterproto2.TYPE_INT32
    )


default_message_pool.register_message("oneof", "MixedDrink", MixedDrink)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class Test(betterproto2.Message):
    """


    Oneofs:
        - foo:
        - bar:
    """

    pitied: "typing.Annotated[int, pydantic.Field(ge=-2**31, le=2**31 - 1)] | None" = betterproto2.field(
        1, betterproto2.TYPE_INT32, optional=True, group="foo"
    )

    pitier: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)] | None" = (
        betterproto2.field(2, betterproto2.TYPE_STRING, optional=True, group="foo")
    )

    just_a_regular_field: "typing.Annotated[int, pydantic.Field(ge=-2**31, le=2**31 - 1)]" = betterproto2.field(
        3, betterproto2.TYPE_INT32
    )

    drinks: "typing.Annotated[int, pydantic.Field(ge=-2**31, le=2**31 - 1)] | None" = betterproto2.field(
        11, betterproto2.TYPE_INT32, optional=True, group="bar"
    )

    bar_name: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)] | None" = (
        betterproto2.field(12, betterproto2.TYPE_STRING, optional=True, group="bar")
    )

    mixed_drink: "MixedDrink | None" = betterproto2.field(13, betterproto2.TYPE_MESSAGE, optional=True, group="bar")

    @model_validator(mode="after")
    def check_oneof(cls, values):
        return cls._validate_field_groups(values)


default_message_pool.register_message("oneof", "Test", Test)
