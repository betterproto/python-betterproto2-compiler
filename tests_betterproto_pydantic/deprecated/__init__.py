# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: deprecated.proto
# plugin: python-betterproto2
# This file has been @generated

__all__ = ("Empty", "Message", "Test", "TestServiceBase", "TestServiceStub", "TestServiceSyncStub")

import typing
import warnings
from typing import TYPE_CHECKING

import betterproto2
import grpc
import grpclib
import pydantic
from betterproto2.grpc.grpclib_server import ServiceBase
from pydantic.dataclasses import dataclass

from ..message_pool import default_message_pool

if TYPE_CHECKING:
    import grpclib.server
    from betterproto2.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline

betterproto2.check_compiler_version("0.5.1")


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class Empty(betterproto2.Message):
    pass


default_message_pool.register_message("deprecated", "Empty", Empty)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class Message(betterproto2.Message):
    value: "typing.Annotated[str, pydantic.AfterValidator(betterproto2.validators.validate_string)]" = (
        betterproto2.field(1, betterproto2.TYPE_STRING)
    )

    def __post_init__(self) -> None:
        warnings.warn("Message is deprecated", DeprecationWarning)
        super().__post_init__()


default_message_pool.register_message("deprecated", "Message", Message)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class Test(betterproto2.Message):
    """
    Some documentation about the Test message.
    """

    message: "Message | None" = betterproto2.field(1, betterproto2.TYPE_MESSAGE, optional=True)

    value: "typing.Annotated[int, pydantic.Field(ge=-2**31, le=2**31 - 1)]" = betterproto2.field(
        2, betterproto2.TYPE_INT32
    )

    def __post_init__(self) -> None:
        super().__post_init__()
        if self.is_set("message"):
            warnings.warn("Test.message is deprecated", DeprecationWarning)


default_message_pool.register_message("deprecated", "Test", Test)


class TestServiceSyncStub:
    def __init__(self, channel: grpc.Channel):
        self._channel = channel

    def func(self, message: "Empty | None" = None) -> "Empty":
        if message is None:
            message = Empty()

        return self._channel.unary_unary(
            "/deprecated.TestService/func",
            Empty.SerializeToString,
            Empty.FromString,
        )(message)

    def deprecated_func(self, message: "Empty | None" = None) -> "Empty":
        warnings.warn("TestService.deprecated_func is deprecated", DeprecationWarning)

        if message is None:
            message = Empty()

        return self._channel.unary_unary(
            "/deprecated.TestService/deprecated_func",
            Empty.SerializeToString,
            Empty.FromString,
        )(message)


class TestServiceStub(betterproto2.ServiceStub):
    async def func(
        self,
        message: "Empty | None" = None,
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "Empty":
        if message is None:
            message = Empty()

        return await self._unary_unary(
            "/deprecated.TestService/func",
            message,
            Empty,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def deprecated_func(
        self,
        message: "Empty | None" = None,
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "Empty":
        warnings.warn("TestService.deprecated_func is deprecated", DeprecationWarning)

        if message is None:
            message = Empty()

        return await self._unary_unary(
            "/deprecated.TestService/deprecated_func",
            message,
            Empty,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class TestServiceBase(ServiceBase):
    async def func(self, message: "Empty") -> "Empty":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def deprecated_func(self, message: "Empty") -> "Empty":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_func(self, stream: "grpclib.server.Stream[Empty, Empty]") -> None:
        request = await stream.recv_message()
        response = await self.func(request)
        await stream.send_message(response)

    async def __rpc_deprecated_func(self, stream: "grpclib.server.Stream[Empty, Empty]") -> None:
        request = await stream.recv_message()
        response = await self.deprecated_func(request)
        await stream.send_message(response)

    def __mapping__(self) -> "dict[str, grpclib.const.Handler]":
        return {
            "/deprecated.TestService/func": grpclib.const.Handler(
                self.__rpc_func,
                grpclib.const.Cardinality.UNARY_UNARY,
                Empty,
                Empty,
            ),
            "/deprecated.TestService/deprecated_func": grpclib.const.Handler(
                self.__rpc_deprecated_func,
                grpclib.const.Cardinality.UNARY_UNARY,
                Empty,
                Empty,
            ),
        }
