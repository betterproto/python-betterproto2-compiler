# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: googletypes_service_returns_googletype.proto
# plugin: python-betterproto2
# This file has been @generated

__all__ = ("RequestMessage", "TestBase", "TestStub", "TestSyncStub")

from typing import TYPE_CHECKING

import betterproto2
import grpc
import grpclib
from betterproto2.grpc.grpclib_server import ServiceBase
from pydantic.dataclasses import dataclass

from ..message_pool import default_message_pool

if TYPE_CHECKING:
    import grpclib.server
    from betterproto2.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline

betterproto2.check_compiler_version("0.5.1")


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class RequestMessage(betterproto2.Message):
    pass


default_message_pool.register_message("googletypes_service_returns_googletype", "RequestMessage", RequestMessage)


class TestSyncStub:
    """
    Tests that imports are generated correctly when returning Google well-known types
    """

    def __init__(self, channel: grpc.Channel):
        self._channel = channel

    def get_empty(self, message: "RequestMessage | None" = None) -> "_google__protobuf__.Empty":
        if message is None:
            message = RequestMessage()

        return self._channel.unary_unary(
            "/googletypes_service_returns_googletype.Test/GetEmpty",
            RequestMessage.SerializeToString,
            _google__protobuf__.Empty.FromString,
        )(message)

    def get_struct(self, message: "RequestMessage | None" = None) -> "_google__protobuf__.Struct":
        if message is None:
            message = RequestMessage()

        return self._channel.unary_unary(
            "/googletypes_service_returns_googletype.Test/GetStruct",
            RequestMessage.SerializeToString,
            _google__protobuf__.Struct.FromString,
        )(message)

    def get_list_value(self, message: "RequestMessage | None" = None) -> "_google__protobuf__.ListValue":
        if message is None:
            message = RequestMessage()

        return self._channel.unary_unary(
            "/googletypes_service_returns_googletype.Test/GetListValue",
            RequestMessage.SerializeToString,
            _google__protobuf__.ListValue.FromString,
        )(message)

    def get_value(self, message: "RequestMessage | None" = None) -> "_google__protobuf__.Value":
        if message is None:
            message = RequestMessage()

        return self._channel.unary_unary(
            "/googletypes_service_returns_googletype.Test/GetValue",
            RequestMessage.SerializeToString,
            _google__protobuf__.Value.FromString,
        )(message)


class TestStub(betterproto2.ServiceStub):
    """
    Tests that imports are generated correctly when returning Google well-known types
    """

    async def get_empty(
        self,
        message: "RequestMessage | None" = None,
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "_google__protobuf__.Empty":
        if message is None:
            message = RequestMessage()

        return await self._unary_unary(
            "/googletypes_service_returns_googletype.Test/GetEmpty",
            message,
            _google__protobuf__.Empty,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_struct(
        self,
        message: "RequestMessage | None" = None,
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "_google__protobuf__.Struct":
        if message is None:
            message = RequestMessage()

        return await self._unary_unary(
            "/googletypes_service_returns_googletype.Test/GetStruct",
            message,
            _google__protobuf__.Struct,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_list_value(
        self,
        message: "RequestMessage | None" = None,
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "_google__protobuf__.ListValue":
        if message is None:
            message = RequestMessage()

        return await self._unary_unary(
            "/googletypes_service_returns_googletype.Test/GetListValue",
            message,
            _google__protobuf__.ListValue,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_value(
        self,
        message: "RequestMessage | None" = None,
        *,
        timeout: "float | None" = None,
        deadline: "Deadline | None" = None,
        metadata: "MetadataLike | None" = None,
    ) -> "_google__protobuf__.Value":
        if message is None:
            message = RequestMessage()

        return await self._unary_unary(
            "/googletypes_service_returns_googletype.Test/GetValue",
            message,
            _google__protobuf__.Value,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


from ..google import protobuf as _google__protobuf__


class TestBase(ServiceBase):
    """
    Tests that imports are generated correctly when returning Google well-known types
    """

    async def get_empty(self, message: "RequestMessage") -> "_google__protobuf__.Empty":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_struct(self, message: "RequestMessage") -> "_google__protobuf__.Struct":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_list_value(self, message: "RequestMessage") -> "_google__protobuf__.ListValue":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_value(self, message: "RequestMessage") -> "_google__protobuf__.Value":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_get_empty(self, stream: "grpclib.server.Stream[RequestMessage, _google__protobuf__.Empty]") -> None:
        request = await stream.recv_message()
        response = await self.get_empty(request)
        await stream.send_message(response)

    async def __rpc_get_struct(
        self, stream: "grpclib.server.Stream[RequestMessage, _google__protobuf__.Struct]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_struct(request)
        await stream.send_message(response)

    async def __rpc_get_list_value(
        self, stream: "grpclib.server.Stream[RequestMessage, _google__protobuf__.ListValue]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_list_value(request)
        await stream.send_message(response)

    async def __rpc_get_value(self, stream: "grpclib.server.Stream[RequestMessage, _google__protobuf__.Value]") -> None:
        request = await stream.recv_message()
        response = await self.get_value(request)
        await stream.send_message(response)

    def __mapping__(self) -> "dict[str, grpclib.const.Handler]":
        return {
            "/googletypes_service_returns_googletype.Test/GetEmpty": grpclib.const.Handler(
                self.__rpc_get_empty,
                grpclib.const.Cardinality.UNARY_UNARY,
                RequestMessage,
                _google__protobuf__.Empty,
            ),
            "/googletypes_service_returns_googletype.Test/GetStruct": grpclib.const.Handler(
                self.__rpc_get_struct,
                grpclib.const.Cardinality.UNARY_UNARY,
                RequestMessage,
                _google__protobuf__.Struct,
            ),
            "/googletypes_service_returns_googletype.Test/GetListValue": grpclib.const.Handler(
                self.__rpc_get_list_value,
                grpclib.const.Cardinality.UNARY_UNARY,
                RequestMessage,
                _google__protobuf__.ListValue,
            ),
            "/googletypes_service_returns_googletype.Test/GetValue": grpclib.const.Handler(
                self.__rpc_get_value,
                grpclib.const.Cardinality.UNARY_UNARY,
                RequestMessage,
                _google__protobuf__.Value,
            ),
        }
