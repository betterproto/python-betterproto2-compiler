# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: casing.proto
# plugin: python-betterproto2
# This file has been @generated

__all__ = (
    "MyEnum",
    "SnakeCaseMessage",
    "Test",
)

import typing

import betterproto2
import pydantic
from pydantic.dataclasses import dataclass

from ..message_pool import default_message_pool

betterproto2.check_compiler_version("0.5.1")


class MyEnum(betterproto2.Enum):
    ZERO = 0

    ONE = 1

    TWO = 2

    @classmethod
    def __get_pydantic_core_schema__(cls, _source_type, _handler):
        from pydantic_core import core_schema

        return core_schema.int_schema(ge=0)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class SnakeCaseMessage(betterproto2.Message):
    pass


default_message_pool.register_message("casing", "snake_case_message", SnakeCaseMessage)


@dataclass(eq=False, repr=False, config={"extra": "forbid"})
class Test(betterproto2.Message):
    camel_case: "typing.Annotated[int, pydantic.Field(ge=-2**31, le=2**31 - 1)]" = betterproto2.field(
        1, betterproto2.TYPE_INT32
    )

    snake_case: "MyEnum" = betterproto2.field(2, betterproto2.TYPE_ENUM, default_factory=lambda: MyEnum(0))

    snake_case_message: "SnakeCaseMessage | None" = betterproto2.field(3, betterproto2.TYPE_MESSAGE, optional=True)

    uppercase: "typing.Annotated[int, pydantic.Field(ge=-2**31, le=2**31 - 1)]" = betterproto2.field(
        4, betterproto2.TYPE_INT32
    )


default_message_pool.register_message("casing", "Test", Test)
